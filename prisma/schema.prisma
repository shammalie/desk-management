// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String?      @unique
  emailVerified   Boolean      @default(false)
  image           String?
  accounts        Account[]
  sessions        Session[]
  posts           Post[]
  teamMemberships TeamMember[]
  createdAt       DateTime
  updatedAt       DateTime

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organisation {
  id   Int    @id @default(autoincrement())
  name String

  Sites Site[]
}

model Site {
  id             Int          @id @default(autoincrement())
  name           String
  organisationId Int
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  Room           Room[]
}

model Room {
  id     Int    @id @default(autoincrement())
  name   String
  siteId Int
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)
  Desk   Desk[]
}

model Desk {
  id     Int    @id @default(autoincrement())
  name   String
  roodId Int
  room   Room   @relation(fields: [roodId], references: [id], onDelete: Cascade)
}

model TeamMember {
  id     Int    @id @default(autoincrement())
  teamId Int
  userId String
  team   Team   @relation(fields: [id], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  parentId Int? // Foreign key to parent team
  parent   Team?        @relation("TeamHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children Team[]       @relation("TeamHierarchy")
  members  TeamMember[]

  @@index([name])
  @@index([parentId])
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}
